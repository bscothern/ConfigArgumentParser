//
//  RootCommand.swift
//  ConfigArgumentParser
//
//  Created by Braden Scothern on 8/29/20.
//  Copyright Â© 2020 Braden Scothern. All rights reserved.
//

import ArgumentParser
import Foundation

/// The `ParsableCommand` that attempts to interpret a given config file and run the provided command.
@usableFromInline
struct ConfigCommand<RootCommand, Interpreter>: ParsableCommand where RootCommand: ParsableCommand, Interpreter: ConfigFileInterpreter {
    @usableFromInline
    @Option(
        name: .customLong("config"),
        help: "The config file to use for arguments to execute a subcommand. Each part of the command should be on its own line.",
        completion: CompletionKind.file()
    )
    var configFile: String

    @usableFromInline
    @Flag(
        name: .customLong("config-dry-run"),
        help: "When set this flag will cause command generated by the config to print rather than run."
    )
    var dryRun: Bool = false

    @usableFromInline
    init() {}

    @usableFromInline
    mutating func run() throws {
        guard let contents = try? String(contentsOfFile: configFile) else {
            Self.exit(withError: ConfigArgumentParserError.unableToFindConfig(file: configFile))
        }
        let arguments = try Interpreter.convertToArguments(configFileContents: contents)
        if dryRun {
            print("\(RootCommand._commandName) \(arguments.joined(separator: " "))")
        } else {
            RootCommand.main(arguments)
        }
    }
}
