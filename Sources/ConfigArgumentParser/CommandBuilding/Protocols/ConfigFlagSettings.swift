//
//  ConfigFlagSettings.swift
//  ConfigArgumentParser
//
//  Created by Braden Scothern on 9/10/20.
//  Copyright Â© 2020-2021 Braden Scothern. All rights reserved.
//

import ArgumentParser

/// A type that defines the flags used by an `ExecutableEntryPoint` so it knows how to identify a config file or a dry run of a config file.
public protocol ConfigFlagSettings {
    /// The paths to search for a config file.
    ///
    /// When a config files is found it will be used.
    ///
    /// If you wish to disable this and related features then set this to an empty array.
    ///
    /// - Note: This defaults to just the path: `./[EXECUTABLE_NAME].config`
    static var autoConfigPaths: [String] { get }

    /// The long flag that should be used to enable the use of `configLookupPaths` on this run.
    ///
    /// - Note: This defaults to `auto-config`
    static var autoConfig: String { get }

    /// The help message that should be attached to the `enableConfigLookup` flag.
    static var autoConfigHelp: String { get }

    /// The long flag that should be used to print which config file has been found by `autoConfig`.
    ///
    /// - Note: This defaults to `show-auto-config`
    static var showAutoConfigFile: String { get }

    /// The help message that should be attached to the `showAutoConfigFile` flag.
    static var showAutoConfigFileHelp: String { get }

    /// The long flag that should be used to pass in a config file for this executable.
    ///
    /// If this is passed it will always take presidence over the `autoConfig` flag.
    ///
    /// - Note: This defaults to `"config"`
    static var config: String { get }

    /// The help message that should be attached to the `config` flag.
    static var configHelp: String { get }

    /// The long flag that should be used to trigger a dry run of the config command.
    ///
    /// When this flag is passed in it results in the generated config command being printed to the console.
    ///
    /// - Note: This defaults to `"\(self.config)-dry-run"`
    static var dryRun: String { get }

    /// The help message that should be attached to the `dryRun` flag.
    static var dryRunHelp: String { get }
}

extension ConfigFlagSettings {
    @inlinable
    public static var autoConfigPaths: [String] { [] }

    @inlinable
    public static var autoConfig: String { "auto-config" }

    @inlinable
    public static var showAutoConfigFile: String { "show-auto-config" }

    @inlinable
    public static var config: String { "config" }

    @inlinable
    public static var dryRun: String { "\(config)-dry-run" }

    @inlinable
    public static var autoConfigHelp: String {
        let helpIndentation = String(repeating: " ", count: Constants.labelColumnWidth)
        return """
        When enabled then the first config found at these paths will be used:
        \(autoConfigPaths.map { "\(helpIndentation)  \($0)\n" }.joined().dropLast())
        """
    }

    @inlinable
    public static var showAutoConfigFileHelp: String { "If --\(Self.autoConfig) is set then print which auto config file was found and used." }

    @inlinable
    public static var configHelp: String {
        var helpMessage = "The config file to use for arguments to execute a subcommand."
        if !autoConfigPaths.isEmpty {
            helpMessage += " This always takes presidence over --\(Self.autoConfig)."
        }
        return helpMessage
    }

    @inlinable
    public static var dryRunHelp: String { "When set this flag will cause command generated by --\(Self.config) <\(Self.config)> to print rather than run." }
}

extension ConfigFlagSettings {
    @usableFromInline
    static func bind<RootCommand, Interpreter>(to _: RootCommand.Type, _: Interpreter.Type) -> ExecutableEntryPoint.Type where RootCommand: ParsableCommand, Interpreter: ConfigFileInterpreter {
        ExecutableConfigCommand<RootCommand, Interpreter, Self>.self
    }
}
